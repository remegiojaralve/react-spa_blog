{"ast":null,"code":"var _jsxFileName = \"/Users/RJ/Trainings/react-spa_blog/src/components/comment/Comment.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport Button from '../button/Button';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport './comment.scss';\n\nfunction Comment() {\n  const [content, setContent] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const {\n    id\n  } = useParams();\n  const GET_COMMENTS = gql`\n  query getPost {\n    post(id: ${id}) {\n      id\n      title\n      image\n      content\n      createdAt\n      comments {\n        content\n        createdAt\n      }\n    }\n  }\n  `;\n  const {\n    data\n  } = useQuery(GET_COMMENTS);\n  useEffect(() => {\n    if (data) {\n      setComments(Object.values(data.post.comments).reverse());\n    }\n  }, [data]);\n  const ADD_COMMENT = gql`\n  mutation addComment($postId: Int!, $content: String!) {\n    addComment(postId: $postId, content: $content) {\n      content\n      createdAt\n    }\n  }\n  `;\n  const [addComment] = useMutation(ADD_COMMENT, {\n    update(_, result) {\n      setComments([...comments, result.data.addComment]);\n      setContent(\"\");\n    },\n\n    onError(err) {\n      console.log(err);\n    }\n\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addComment({\n      variables: {\n        postId: parseInt(id),\n        content: content\n      }\n    });\n  };\n\n  const handleChange = event => {\n    event.preventDefault();\n    setContent(event.target.value);\n  };\n\n  const newMoment = date => {\n    return date.split(' ')[0] + \" \" + date.split(' ')[1] + \"\" + date.split(' ')[2];\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"l-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"comment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"COMMENT\"), Object.keys(comments).map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__message\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, comments[index].content), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"comment__message-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, moment(newMoment(comments[index].createdAt)).fromNow()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"comment__textarea\",\n    name: \"comment\",\n    value: content,\n    placeholder: \"Write comment\",\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: \"SUBMIT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Comment;","map":{"version":3,"sources":["/Users/RJ/Trainings/react-spa_blog/src/components/comment/Comment.js"],"names":["React","useState","useEffect","useQuery","useMutation","gql","Button","useParams","moment","Comment","content","setContent","comments","setComments","id","GET_COMMENTS","data","Object","values","post","reverse","ADD_COMMENT","addComment","update","_","result","onError","err","console","log","handleSubmit","event","preventDefault","variables","postId","parseInt","handleChange","target","value","newMoment","date","split","keys","map","index","createdAt","fromNow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client'\nimport Button from '../button/Button';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\n\nimport './comment.scss';\n\n\nfunction Comment() {\n  const [content, setContent] = useState(\"\");\n  const [ comments, setComments ] = useState([]);\n  const { id } = useParams()\n\n  const GET_COMMENTS = gql`\n  query getPost {\n    post(id: ${id}) {\n      id\n      title\n      image\n      content\n      createdAt\n      comments {\n        content\n        createdAt\n      }\n    }\n  }\n  `\n  const { data } = useQuery(GET_COMMENTS);\n\n  useEffect(() => {\n    if (data) {\n      setComments(Object.values(data.post.comments).reverse())\n    }\n  }, [data])\n\n  const ADD_COMMENT = gql`\n  mutation addComment($postId: Int!, $content: String!) {\n    addComment(postId: $postId, content: $content) {\n      content\n      createdAt\n    }\n  }\n  `;\n\n  const [addComment] = useMutation (ADD_COMMENT, {\n    update(_, result) {\n      setComments([...comments, result.data.addComment]);\n      setContent(\"\")\n    },\n    onError(err) {\n      console.log(err)\n    }\n  })\n\n  const handleSubmit = (event)=> {\n    event.preventDefault();\n    addComment({variables : { postId: parseInt(id), content: content } });\n  }\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setContent(event.target.value);\n  }\n\n  const newMoment = (date) => {\n    return date.split(' ')[0] +\" \"+ date.split(' ')[1] +\"\"+ date.split(' ')[2];\n  }\n\n  return (\n    <div className=\"l-container\">\n      <div className=\"comment\">\n        <h2 className=\"comment__title\">COMMENT</h2>\n\n        {\n          Object.keys(comments).map((value, index) => (\n            <div className=\"comment__message\" key={index}>\n              <p>{comments[index].content}</p>\n              <span className=\"comment__message-date\">{moment(newMoment(comments[index].createdAt)).fromNow()}</span>\n            </div>\n          ))\n        }\n\n        <div className=\"comment__form\">\n          <form onSubmit={ handleSubmit }>\n            <textarea className=\"comment__textarea\" name=\"comment\" value={content} placeholder=\"Write comment\" onChange={handleChange} required/>\n            <div className=\"comment__button\">\n              <Button text=\"SUBMIT\" />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}