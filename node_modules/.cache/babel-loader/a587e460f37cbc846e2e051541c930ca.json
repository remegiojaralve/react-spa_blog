{"ast":null,"code":"var _jsxFileName = \"/Users/RJ/Trainings/react-spa_blog/src/components/form/RegisterForm.js\";\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { authLogin } from '../../redux/modules/auth/authActions';\nimport { toggleFormType, toggleForm } from '../../redux/modules/toggleForm/toggleFormActions';\nimport Button from '../button/Button';\nimport './form.scss';\n\nfunction RegisterForm(props) {\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [isErrorClass, setIsErrorClass] = useState(\"\");\n  const [isOpenClass, setIsOpenClass] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"Invalid Password\");\n  const REGISTER = gql`\n  mutation register($email: String!, $password: String!) {\n    register(email: $email, password: $password)\n  }\n  `;\n  const LOGIN_USER = gql`\n  mutation authenticate($email: String!, $password: String!) {\n    authenticate(email: $email, password: $password)\n  }\n  `;\n  const [loginUser] = useMutation(LOGIN_USER, {\n    update(_, result) {\n      if (result.data.authenticate) {\n        localStorage.setItem('token', result.data.authenticate);\n      }\n    }\n\n  });\n  const [registerAcct] = useMutation(REGISTER, {\n    update(_, result) {\n      if (result.data.register) {\n        console.log(result.data);\n        loginUser({\n          variables: values\n        });\n        dispatch(authLogin(true));\n        dispatch(toggleForm());\n        dispatch(toggleFormType('login-form'));\n      }\n    },\n\n    onError(err) {\n      //alert(err.graphQLErrors[0].extensions.exception.errors[0].message)\n      setErrorMessage(\"Email address is already been taken\");\n    }\n\n  });\n\n  const showErrorMessage = errorMessage => {\n    setErrorMessage(errorMessage);\n    setIsErrorClass(\"is-error\");\n    setTimeout(() => {\n      setIsOpenClass(\"is-open\");\n    }, 100);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    showErrorMessage();\n    const re = /\\S+@\\S+\\.\\S+/;\n\n    if (re.test(values.email)) {\n      if (values.password === values.confirmPassword) {\n        registerAcct({\n          variables: values\n        });\n      } else {\n        setErrorMessage(\"Your password and confirmation password do not match\");\n      }\n    } else {\n      setErrorMessage(\"Email address is invalid\");\n    }\n  };\n\n  const onChange = event => {\n    event.preventDefault();\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n    setIsOpenClass(\"\");\n    setTimeout(() => {\n      setIsErrorClass(\"\");\n    }, 0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: `form ${isErrorClass} ${props.stateClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"form__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"REGISTER\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: `form__error-message ${isOpenClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, errorMessage), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__input-container form__input-container--register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form__input\",\n    name: \"email\",\n    type: \"email\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__input-container form__input-container--register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form__input\",\n    name: \"password\",\n    type: \"password\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__input-container form__input-container--register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form__input\",\n    name: \"confirmPassword\",\n    type: \"password\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: \"REGISTER\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Already have an account?\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(toggleFormType('login-form')),\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \" LOGIN HERE\"))));\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/RJ/Trainings/react-spa_blog/src/components/form/RegisterForm.js"],"names":["React","useState","useMutation","gql","useDispatch","authLogin","toggleFormType","toggleForm","Button","RegisterForm","props","dispatch","values","setValues","email","password","confirmPassword","isErrorClass","setIsErrorClass","isOpenClass","setIsOpenClass","errorMessage","setErrorMessage","REGISTER","LOGIN_USER","loginUser","update","_","result","data","authenticate","localStorage","setItem","registerAcct","register","console","log","variables","onError","err","showErrorMessage","setTimeout","onSubmit","event","preventDefault","re","test","onChange","target","name","value","stateClass"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client'\n\nimport { useDispatch } from 'react-redux';\nimport { authLogin } from '../../redux/modules/auth/authActions';\nimport { toggleFormType, toggleForm } from '../../redux/modules/toggleForm/toggleFormActions';\n\nimport Button from '../button/Button';\nimport './form.scss';\n\nfunction RegisterForm(props) {\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [isErrorClass, setIsErrorClass] = useState(\"\");\n  const [isOpenClass, setIsOpenClass] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"Invalid Password\");\n\n  const REGISTER = gql`\n  mutation register($email: String!, $password: String!) {\n    register(email: $email, password: $password)\n  }\n  `;\n\n  const LOGIN_USER = gql`\n  mutation authenticate($email: String!, $password: String!) {\n    authenticate(email: $email, password: $password)\n  }\n  `;\n\n  const [ loginUser ] = useMutation(LOGIN_USER, {\n    update(_, result) {\n      if(result.data.authenticate){\n        localStorage.setItem('token', result.data.authenticate);\n      }\n    }\n  });\n\n  const [ registerAcct ] = useMutation(REGISTER, {\n    update(_, result) {\n      if(result.data.register){\n        console.log(result.data)\n        loginUser({variables: values});\n        dispatch(authLogin(true));\n        dispatch(toggleForm());\n        dispatch(toggleFormType('login-form'));\n      }\n    },\n    onError(err) {\n      //alert(err.graphQLErrors[0].extensions.exception.errors[0].message)\n      setErrorMessage(\"Email address is already been taken\");\n    }\n  });\n\n  const showErrorMessage = (errorMessage) => {\n    setErrorMessage(errorMessage);\n    setIsErrorClass(\"is-error\");\n    setTimeout(() => {\n      setIsOpenClass(\"is-open\");\n    }, 100)\n  }\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    showErrorMessage();\n    const re = /\\S+@\\S+\\.\\S+/\n    if(re.test(values.email)) {\n      if (values.password === values.confirmPassword) {\n        registerAcct({variables: values});\n      }else {\n        setErrorMessage(\"Your password and confirmation password do not match\");\n      }\n    } else {\n      setErrorMessage(\"Email address is invalid\");\n    }\n  }\n\n  const onChange = (event) => {\n    event.preventDefault();\n    setValues({...values, [event.target.name]: event.target.value});\n\n    setIsOpenClass(\"\");\n    setTimeout(() => {\n      setIsErrorClass(\"\");\n    }, 0)\n  }\n\n  return (\n    <section className={`form ${isErrorClass} ${props.stateClass}`}>\n      <h2 className=\"form__title\">REGISTER</h2>\n      <div className={`form__error-message ${isOpenClass}`}>{ errorMessage }</div>\n      <form onSubmit={onSubmit}>\n        <div className=\"form__input-container form__input-container--register\">\n          <label className=\"form__label\">Email</label>\n          <input className=\"form__input\" name=\"email\" type=\"email\" onChange={onChange} required/>\n        </div>\n\n        <div className=\"form__input-container form__input-container--register\">\n          <label className=\"form__label\">Password</label>\n          <input className=\"form__input\" name=\"password\" type=\"password\" onChange={onChange} required/>\n        </div>\n\n        <div className=\"form__input-container form__input-container--register\">\n          <label className=\"form__label\">Confirm Password</label>\n          <input className=\"form__input\" name=\"confirmPassword\" type=\"password\" onChange={onChange} required/>\n        </div>\n\n        <div className=\"form__button-wrapper\">\n          <Button text=\"REGISTER\"/>\n        </div>\n\n        <div className=\"form__note\">\n          Already have an account?\n          <button onClick={() => dispatch(toggleFormType('login-form'))} type=\"button\"> LOGIN HERE</button>\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}